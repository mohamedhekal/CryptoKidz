#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ูููุฏ ูุญุงูุธ ุงูุจูุชูููู ุงููุจุณุท ููุฃุทูุงู
"""

import hashlib
import secrets
import base58
import json
from typing import Dict, List, Tuple

class SimpleWalletGenerator:
    """ูููุฏ ูุญูุธุฉ ูุจุณุท ููุฃุทูุงู"""
    
    def __init__(self):
        self.colors = {
            'primary': '#FF6B6B',      # ุฃุญูุฑ ูุงุชุญ
            'secondary': '#4ECDC4',    # ุฃุฒุฑู ูุฎุถุฑ
            'accent': '#45B7D1',       # ุฃุฒุฑู ูุงุชุญ
            'success': '#96CEB4',      # ุฃุฎุถุฑ ูุงุชุญ
            'warning': '#FFEAA7'       # ุฃุตูุฑ ูุงุชุญ
        }
    
    def generate_simple_seed(self) -> str:
        """ุชูููุฏ seed phrase ูุจุณุท ููุฃุทูุงู"""
        # ูููุงุช ุจุณูุทุฉ ููููููุฉ ููุฃุทูุงู
        simple_words = [
            "ูุท", "ููุจ", "ุฃุณุฏ", "ููุฑ", "ููู", "ุฒุฑุงูุฉ", "ุญุตุงู", "ุจูุฑุฉ",
            "ุฎุฑูู", "ุฏุฌุงุฌุฉ", "ุจุท", "ุจุทุฉ", "ุณููุฉ", "ุณูุญูุงุฉ", "ุฃุฑูุจ",
            "ูุฑุฏ", "ุจุงูุฏุง", "ููุงูุง", "ููุบุฑ", "ุฏุจ", "ุฐุฆุจ", "ุซุนูุจ"
        ]
        
        # ุชูููุฏ 4 ูููุงุช ุนุดูุงุฆูุฉ
        seed_words = []
        for _ in range(4):
            word = secrets.choice(simple_words)
            seed_words.append(word)
        
        return " ".join(seed_words)
    
    def create_simple_hash(self, text: str) -> str:
        """ุฅูุดุงุก hash ูุจุณุท ููุฃุทูุงู"""
        # ุงุณุชุฎุฏุงู SHA-256 ูููู ุนุฑุถ ุงููุชูุฌุฉ ุจุทุฑููุฉ ูุจุณุทุฉ
        hash_result = hashlib.sha256(text.encode()).hexdigest()
        # ุฃุฎุฐ ุฃูู 8 ุฃุญุฑู ููุท ููุชุจุณูุท
        return hash_result[:8].upper()
    
    def generate_public_key(self, private_key: str) -> str:
        """ุชูููุฏ ููุชุงุญ ุนุงู ูุจุณุท"""
        # ูุญุงูุงุฉ ุจุณูุทุฉ ูุชูููุฏ ุงูููุชุงุญ ุงูุนุงู
        hash_result = hashlib.sha256(private_key.encode()).hexdigest()
        return f"BTC{hash_result[:10].upper()}"
    
    def generate_address(self, public_key: str) -> str:
        """ุชูููุฏ ุนููุงู ุงูุจูุชูููู ุงููุจุณุท"""
        # ูุญุงูุงุฉ ุจุณูุทุฉ ูุชูููุฏ ุงูุนููุงู
        address_hash = hashlib.sha256(public_key.encode()).hexdigest()
        return f"1{address_hash[:10].upper()}"
    
    def create_wallet(self) -> Dict:
        """ุฅูุดุงุก ูุญูุธุฉ ูุงููุฉ ูุจุณุทุฉ"""
        # ุชูููุฏ ุงููููุงุช ุงูุณุฑูุฉ
        seed_phrase = self.generate_simple_seed()
        
        # ุฅูุดุงุก ุงูููุชุงุญ ุงูุฎุงุต
        private_key = self.create_simple_hash(seed_phrase)
        
        # ุฅูุดุงุก ุงูููุชุงุญ ุงูุนุงู
        public_key = self.generate_public_key(private_key)
        
        # ุฅูุดุงุก ุงูุนููุงู
        address = self.generate_address(public_key)
        
        wallet = {
            "seed_phrase": seed_phrase,
            "private_key": private_key,
            "public_key": public_key,
            "address": address,
            "balance": "0.00 BTC",
            "created_at": "ุงูููู"
        }
        
        return wallet
    
    def explain_wallet_creation(self) -> List[Dict]:
        """ุดุฑุญ ุฎุทูุงุช ุฅูุดุงุก ุงููุญูุธุฉ ููุฃุทูุงู"""
        steps = [
            {
                "step": 1,
                "title": "๐ฒ ุชูููุฏ ุงููููุงุช ุงูุณุฑูุฉ",
                "description": "ูููู ุจุงุฎุชูุงุฑ 4 ูููุงุช ุนุดูุงุฆูุฉ ูุซู: ูุท ููุจ ุฃุณุฏ ููุฑ",
                "code": "seed = generate_random_words()",
                "color": self.colors['primary']
            },
            {
                "step": 2,
                "title": "๐ ุฅูุดุงุก ุงูููุชุงุญ ุงูุฎุงุต",
                "description": "ูุญูู ุงููููุงุช ุฅูู ููุชุงุญ ุณุฑู ุจุงุณุชุฎุฏุงู ุฏุงูุฉ ุงูุชุดููุฑ",
                "code": "private_key = hash(seed_phrase)",
                "color": self.colors['secondary']
            },
            {
                "step": 3,
                "title": "๐ ุฅูุดุงุก ุงูููุชุงุญ ุงูุนุงู",
                "description": "ูู ุงูููุชุงุญ ุงูุฎุงุต ูููุฏ ููุชุงุญ ุนุงู ูููู ูุดุงุฑูุชู",
                "code": "public_key = generate_from(private_key)",
                "color": self.colors['accent']
            },
            {
                "step": 4,
                "title": "๐ ุฅูุดุงุก ุงูุนููุงู",
                "description": "ูุญูู ุงูููุชุงุญ ุงูุนุงู ุฅูู ุนููุงู ูุตูุฑ ูุณูู ุงูุชุฐูุฑ",
                "code": "address = convert_to_address(public_key)",
                "color": self.colors['success']
            }
        ]
        return steps
    
    def validate_wallet(self, wallet: Dict) -> bool:
        """ุงูุชุญูู ูู ุตุญุฉ ุงููุญูุธุฉ"""
        required_fields = ['seed_phrase', 'private_key', 'public_key', 'address']
        return all(field in wallet for field in required_fields)
    
    def get_wallet_info(self, wallet: Dict) -> str:
        """ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุญูุธุฉ ุจุตูุบุฉ ูุตูุฉ"""
        info = f"""
๐ฑ ูุญูุธุฉ CryptoKidz ุงูุฌุฏูุฏุฉ:

๐ ุงููููุงุช ุงูุณุฑูุฉ:
{wallet['seed_phrase']}

๐ ุงูููุชุงุญ ุงูุฎุงุต:
{wallet['private_key']}

๐ ุงูููุชุงุญ ุงูุนุงู:
{wallet['public_key']}

๐ ุงูุนููุงู:
{wallet['address']}

๐ฐ ุงูุฑุตูุฏ: {wallet['balance']}
        """
        return info.strip()

# ุฏุงูุฉ ูุณุงุนุฏุฉ ููุงุฎุชุจุงุฑ
def test_wallet_generator():
    """ุงุฎุชุจุงุฑ ูููุฏ ุงููุญูุธุฉ"""
    generator = SimpleWalletGenerator()
    
    print("๐งช ุงุฎุชุจุงุฑ ูููุฏ ุงููุญูุธุฉ...")
    
    # ุฅูุดุงุก ูุญูุธุฉ
    wallet = generator.create_wallet()
    print("\nโ ุชู ุฅูุดุงุก ุงููุญูุธุฉ ุจูุฌุงุญ!")
    print(generator.get_wallet_info(wallet))
    
    # ุนุฑุถ ุฎุทูุงุช ุงูุฅูุดุงุก
    print("\n๐ ุฎุทูุงุช ุฅูุดุงุก ุงููุญูุธุฉ:")
    steps = generator.explain_wallet_creation()
    for step in steps:
        print(f"\n{step['step']}. {step['title']}")
        print(f"   {step['description']}")

if __name__ == "__main__":
    test_wallet_generator() 